import sqlite3
import json
import telebot
from telebot import types
import time
import datetime
import logging
from dotenv import load_dotenv, find_dotenv
import os
from components import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('telebot')
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

load_dotenv(find_dotenv())
bot = telebot.TeleBot(os.getenv('TOKEN'))
start_time = time.time()
conn = sqlite3.connect('DunGram.db')
c = conn.cursor()


script = '''
CREATE TABLE IF NOT EXISTS Users (
    UserId INTEGER PRIMARY KEY,
    RegistrationDate TEXT
);

CREATE TABLE IF NOT EXISTS Profiles (
    ProfileId INTEGER PRIMARY KEY,
    UserId INTEGER,
    Class TEXT,
    Level INTEGER,
    Experience INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE TABLE IF NOT EXISTS InventorySlots (
    SlotId INTEGER PRIMARY KEY,
    UserId INTEGER,
    ItemId INTEGER,
    ItemCount INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId),
    FOREIGN KEY (ItemId) REFERENCES Items(ItemId)
);

CREATE TABLE IF NOT EXISTS Items (
    ItemId INTEGER PRIMARY KEY,
    ItemName TEXT,
    ItemData TEXT
);

CREATE TABLE IF NOT EXISTS Recipes (
    ResultItemID INTEGER,
    RecipeClass INTEGER,
    Ingredients TEXT,
    ResultItemCount INTEGER
);

CREATE TABLE IF NOT EXISTS ProfileBalance (
    UserId INTEGER,
    Balance INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
)
'''


c.executescript(script)

conn.commit()
conn.close()


@bot.message_handler(func=lambda message: message.date <= start_time)
def handle_old_updates(message):
    pass


def start_game(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    user_id = call.from_user.id
    if profile_exists(user_id):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text="–í—ã–ª–∞–∑–∫–∞", callback_data=f"sortie:{user_id}")
        btn2 = types.InlineKeyboardButton(
            text="–ü–æ–¥–∑–µ–º–µ–ª—å—è", callback_data=f"dungeons:{user_id}")
        btn_back = types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"main:{user_id}")
        markup.row(btn1, btn2)
        markup.row(btn_back)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º‚öîÔ∏è:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")

def character(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    user_id = call.from_user.id
    if not profile_exists(user_id):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text="–í–æ–∏–Ω üõ°", callback_data=f"select_warrior:{call.from_user.id}")
        btn2 = types.InlineKeyboardButton(
            text="–ú–∞–≥ üßô‚Äç‚ôÇÔ∏è", callback_data=f"select_wiz:{call.from_user.id}")
        btn3 = types.InlineKeyboardButton(
            text="–ê—Å—Å–∞—Å–∏–Ω ü•∑", callback_data=f"select_assasin:{call.from_user.id}")
        btn4 = types.InlineKeyboardButton(
            text="–û –∫–ª–∞—Å—Å–∞—Ö üëë", callback_data=f"about_classes:{call.from_user.id}")
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.send_message(call.message.chat.id, "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
                        reply_markup=markup)
    else:
        conn = sqlite3.connect('DunGram.db')
        c = conn.cursor()
        c.execute("SELECT * FROM Profiles WHERE UserId =?", (user_id,))
        profile = c.fetchone()
        c.execute("SELECT * FROM Users WHERE UserId =?", (user_id,))
        user = c.fetchone()
        c.execute("SELECT Balance FROM ProfileBalance WHERE UserId = ?", (user_id,))
        balance = c.fetchone()
        c.execute("SELECT QuestId FROM CanumanQuest WHERE UserId = ?", (user_id,))
        quest = c.fetchone()
        balance = balance[0] if balance is not None else 0
        markup = types.InlineKeyboardMarkup()
        btn4 = types.InlineKeyboardButton(
            text="–û –∫–ª–∞—Å—Å–∞—Ö üëë", callback_data=f"about_classes:{user_id}")
        markup.row(btn4)
        class_emoji = ""
        if profile[2] == "–í–æ–∏–Ω":
            class_emoji = "üõ°"
        elif profile[2] == "–ú–∞–≥":
            class_emoji = "üßô‚Äç‚ôÇÔ∏è"
        elif profile[2] == "–ê—Å—Å–∞—Å–∏–Ω":
            class_emoji = "ü•∑"
        trophies = [
"–ë–æ–Ω–∞–ø–∞—Ä—Ç",
]
        user_trophies = trophies[:quest[0]-1]
        if user_trophies:
            user_trophies_text = "–í–∞—à–∏ —Ç–∏—Ç—É–ª—ã:" + "\n" + "\n".join(user_trophies) + "\n\n"
        else:
            user_trophies_text = "–£ –í–∞—Å –Ω–µ—Ç —Ç–∏—Ç—É–ª–æ–≤\n\n"
        message_text = (
            f"–í–∞—Å –∑–æ–≤—É—Ç: {user[1]}üîÖ\n"
            f"–í–∞—à –∫–ª–∞—Å—Å: {profile[2]}{class_emoji}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {profile[3]}üÜô\n"
            f"–û–ø—ã—Ç: {profile[4]}‚öúÔ∏è\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É–º—Ä—É–¥–æ–≤: {balance}üíé\n\n"
            f"{user_trophies_text}"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user[2]}üïì"
        )
        bot.send_message(call.message.chat.id,
                        text=message_text,
                        reply_markup=markup,
                        )

def select_warrior(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    user_id = call.from_user.id
    username = call.from_user.username
    registration_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not profile_exists(user_id):
        conn = sqlite3.connect('DunGram.db')
        c = conn.cursor()
        c.execute("INSERT INTO Profiles (UserId, Class, Level, Experience) VALUES (?,?,?,?)",
                (user_id, "–í–æ–∏–Ω", 1, 0))
        c.execute("INSERT INTO Users (UserID, Username, RegistrationDate) VALUES (?,?,?)",
                (user_id, username, registration_date))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å –í–æ–∏–Ω–∞!")
    else:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å!")

def select_wiz(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    user_id = call.from_user.id
    username = call.from_user.username
    registration_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not profile_exists(user_id):
        conn = sqlite3.connect('DunGram.db')
        c = conn.cursor()
        c.execute("INSERT INTO Profiles (UserId, Class, Level, Experience) VALUES (?,?,?,?)",
                (user_id, "–ú–∞–≥", 1, 0))
        c.execute("INSERT INTO Users (UserID, Username, RegistrationDate) VALUES (?,?,?)",
                (user_id, username, registration_date))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å –ú–∞–≥–∞!")
    else:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å!")

def select_assasin(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    user_id = call.from_user.id
    username = call.from_user.username
    registration_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not profile_exists(user_id):
        conn = sqlite3.connect('DunGram.db')
        c = conn.cursor()
        c.execute("INSERT INTO Profiles (UserId, Class, Level, Experience) VALUES (?,?,?,?)",
                (user_id, "–ê—Å—Å–∞—Å–∏–Ω", 1, 0))
        c.execute("INSERT INTO Users (UserID, Username, RegistrationDate) VALUES (?,?,?)",
                (user_id, username, registration_date))
        conn.commit()
        conn.close()
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å –ê—Å—Å–∞—Å–∏–Ω–∞!")
    else:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å!")

def about_classes(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    foo = '''
<b>–í–æ–∏–Ω üõ°:</b>
<i>–£–º–µ–ª—ã–π –≤–æ–∏–Ω, –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∏—Å–∫—É—Å–Ω—ã–π –∫–∞–∫ –≤ –∑–∞—â–∏—Ç–µ, —Ç–∞–∫ –∏ –≤ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏.</i>

<b>–ú–∞–≥ üßô‚Äç‚ôÇÔ∏è</b>
<i>–ú–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞–≥, –∞—Ç–∞–∫—É—é—â–∏–π –≤—Ä–∞–≥–æ–≤ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.</i>

<b>–ê—Å—Å–∞—Å–∏–Ω ü•∑</b>
<i>–õ–æ–≤–∫–∏–π –∏ —Å–∫—Ä—ã—Ç–Ω—ã–π —É–±–∏–π—Ü–∞, –Ω–∞–Ω–æ—Å—è—â–∏–π –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–µ —É–¥–∞—Ä—ã.</i>
'''
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"character:{call.from_user.id}")
    markup.row(btn1)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=foo,
        reply_markup=markup,
        parse_mode='HTML'
    )




def town(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    if not profile_exists(call.data.split(':')[1]):
        bot.send_message(call.message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="–¢–æ–ø üèÜ", callback_data=f"top:{call.from_user.id}")
    btn2 = types.InlineKeyboardButton(
        text="–ü–æ–¥–∑–µ–º–µ–ª—å—è ü™¨", callback_data=f"enter_dungeon:{call.from_user.id}")
    btn3 = types.InlineKeyboardButton(
        text="–•—Ä–∞–Ω–∏–ª–∏—â–µ üì¶", callback_data=f"storage:{call.from_user.id}")
    btn4 = types.InlineKeyboardButton(
        text="–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ ü§î", callback_data=f"crossprofile:{call.from_user.id}")
    btn5 = types.InlineKeyboardButton(
        text="–ö—É–∑–Ω–µ—Ü üî®", callback_data=f"hammersmith:{call.from_user.id}")
    btn6 = types.InlineKeyboardButton(
        text="–ê–ª—Ö–∏–º–∏–∫ üß™", callback_data=f"alchemist:{call.from_user.id}")
    btn7 = types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–∞–≤–µ—Ü üíµ", callback_data=f"dealer:{call.from_user.id}")
    btn8 = types.InlineKeyboardButton(
        text="–í–æ—Å–∏–ª–∏–π ü§†", callback_data=f"canuman:{call.from_user.id}")
    btn_back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"main:{call.from_user.id}")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.row(btn5, btn6)
    markup.row(btn7, btn8)
    markup.row(btn_back)
    bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –≥–æ—Ä–æ–¥!",
                    reply_markup=markup)

def crossprofile(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    if not profile_exists(call.data.split(':')[1]):
        bot.send_message(call.message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    bot.send_message(call.message.chat.id, text="–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..")




def dialogue_hammersmith(call):
    pass



def show_inventory(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    if not profile_exists(call.data.split(':')[1]):
        bot.send_message(call.message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    user_id = call.from_user.id
    conn = sqlite3.connect('DunGram.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã)
    c.execute('''
    SELECT i.ItemName, s.ItemCount
    FROM InventorySlots s
    JOIN Items i ON s.ItemId = i.ItemId
    WHERE s.UserId = ? AND s.ItemCount > 0
    ''', (user_id,))
    inventory_items = c.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
    if inventory_items:
        inventory_message = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        for index, item in enumerate(inventory_items, start=1):
            item_name, item_count = item
            inventory_message += f"     {index}. {item_name}: {item_count} —à—Ç.\n"
    else:
        inventory_message = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(call.message.chat.id, inventory_message)

    conn.close()


# –¢—ã —Ç–æ—Ç —Å–∞–º—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫? –ù—É —Ç–æ–≥–¥–∞ —Å–ª—É—à–∞–π –º–µ–Ω—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –ª—é–±–ª—é, –∞ —Ç–æ –±—ã–ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ.
# –°–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–±—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ—Ç–µ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –±—É–¥–µ—à—å –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã. –í—ã–ª–æ–∂–∏–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∫–æ–º–±–∏–Ω—Ü–∞–∏—é –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∑–µ–ª—å–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç
# –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–Ω–µ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–≤–∞ –æ—Ç —Ç–µ–±—è
# –ï—Å–ª–∏ —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –∏ –∑–∞–∫–∏–Ω—É–ª –ª–∏—à–Ω–∏–π –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç, —Ç–æ –º–æ–∂–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∑–∞–±—Ä–∞–≤ –≤—Å–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
#
#
#
#
#
#

def show_FAQ(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    bot.send_message(call.message.chat.id, "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")


def show_coders(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    foo = '''
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: https://t.me/sanzharirl
–¢–µ—Å—Ç–µ—Ä—ã: @cx10bx, @popaslona210, @HollyNicki, @aquarelka_volodya, 
–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä: @popaslona210
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: 04.05.24
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: Python, telebot, SQL

'''
    bot.send_message(call.message.chat.id, text=foo)
