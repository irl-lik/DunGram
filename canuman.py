import sqlite3
import json
import telebot
from telebot import types
import time
import datetime
import random
import logging
from dotenv import load_dotenv, find_dotenv
import os
from components import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('telebot')
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

load_dotenv(find_dotenv())
bot = telebot.TeleBot(os.getenv('TOKEN'))
start_time = time.time()
conn = sqlite3.connect('DunGram.db')
c = conn.cursor()


script = '''
CREATE TABLE IF NOT EXISTS Users (
    UserId INTEGER PRIMARY KEY,
    RegistrationDate TEXT
);

CREATE TABLE IF NOT EXISTS Profiles (
    ProfileId INTEGER PRIMARY KEY,
    UserId INTEGER,
    Class TEXT,
    Level INTEGER,
    Experience INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE TABLE IF NOT EXISTS InventorySlots (
    SlotId INTEGER PRIMARY KEY,
    UserId INTEGER,
    ItemId INTEGER,
    ItemCount INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId),
    FOREIGN KEY (ItemId) REFERENCES Items(ItemId)
);

CREATE TABLE IF NOT EXISTS Items (
    ItemId INTEGER PRIMARY KEY,
    ItemName TEXT,
    ItemData TEXT
);

CREATE TABLE IF NOT EXISTS Recipes (
    ResultItemID INTEGER,
    RecipeClass INTEGER,
    Ingredients TEXT,
    ResultItemCount INTEGER
);

CREATE TABLE IF NOT EXISTS ProfileBalance (
    UserId INTEGER,
    Balance INTEGER,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE TABLE IF NOT EXISTS CanumanQuest (
    QuestId INTEGER,
    UserId INTEGER PRIMARY KEY
)
'''


c.executescript(script)

conn.commit()
conn.close()

quests = {
        "1": ["–ê–∫–≤–∞—Ä–µ–ª—å–∫–∞", "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–∞—Ä–∫—É—Ä —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ù–∞–ø–æ–ª–µ–æ–ΩüéÇ!\n\n‚ùóÔ∏è–ö–∞–∂–¥—ã–π –ø—Ä—ã–∂–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã, –∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 2,5 —Å–µ–∫—É–Ω–¥‚ùóÔ∏è"],
        "2": False,
    }

def canuman(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    
    conn = sqlite3.connect('DunGram.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM CanumanQuest WHERE UserId = ?", (call.from_user.id,))
    user_quest = c.fetchone()
    
    if user_quest is None:
        c.execute("INSERT INTO CanumanQuest (QuestId, UserId) VALUES (?, ?)", (1, call.from_user.id))
        conn.commit()
    conn.close()
    if user_quest is not None:
        user_quest = user_quest[0]
    else:
        user_quest = 1
    
    markup = types.InlineKeyboardMarkup()
    if quests[str(user_quest)] is not False:
        message_text = ("–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã –æ—Ç –í–æ—Å–∏–ª–∏—è!\n"
                        f"–ö–≤–µ—Å—Ç: {user_quest}\n"
                        f"{quests[str(user_quest)][1]}"
                        )
        btn1 = types.InlineKeyboardButton(
            text=f"{quests[str(user_quest)][0]}",
            callback_data=f"canuman_quest:{call.from_user.id}:{user_quest}:1")
        markup.row(btn1)
    else:
        message_text = ("–î–∞, —Ç—ã –º–æ–Ω—Å—Ç—Ä!üî•\n"
                        "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —É –º–µ–Ω—è –Ω–µ—Ç –¥–ª—è —Ç–µ–±—è –∫–≤–µ—Å—Ç–æ–≤üìú\n"
                        "–ò –ø–æ —Å–µ–∫—Ä–µ—Ç—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –∫–≤–µ—Å—Ç—ã, —Ç–æ –ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—Éü§´")
    btn_back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
        callback_data=f"town:{call.from_user.id}"
    )
    markup.row(btn_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=message_text,
        reply_markup=markup)
    
def canuman_quest(call):
    if call.from_user.id != int(call.data.split(':')[1]):
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Å–æ —Å–≤–æ–µ–π –∫–Ω–æ–ø–∫–æ–π!")
        return
    
    user_quest, user_progress = map(int, call.data.split(':')[2:4])
    if user_quest == 1:
        message_text = quests['1'][1]
        start_time = time.time()
        if (user_progress <= 10) and (user_progress > 1):
            start_time = float(call.data.split(':')[4])
        if user_progress <= 15:
            current_time = time.time()
            if ((current_time - start_time) > 2.5) or ((current_time - start_time) < 2):
            # if False:
                message_text += "\n–í—ã –æ—Å—Ç—É–ø–∏–ª–∏—Å—å, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ!"
                user_progress = 1
            message_text += f'\n–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø—Ä—ã–∂–æ–∫!\n\n–ï—â—ë –æ—Å—Ç–∞–ª–æ—Å—å: {15-user_progress+1}/15'
            buttons = ["E", "E", "E", "E", "E"]
            correct_button_index = random.randint(0, 4)
            buttons[correct_button_index] = "S"
            markup = types.InlineKeyboardMarkup()
            for _ in buttons:
                if _ == "S":
                    btn = types.InlineKeyboardButton(text="‚úÖ", callback_data=f"canuman_quest:{call.from_user.id}:{user_quest}:{user_progress+1}:{time.time()}")
                else:
                    btn = types.InlineKeyboardButton(text="‚ùå", callback_data=f"canuman_quest:{call.from_user.id}:{user_quest}:1:{time.time()}")
                markup.row(btn)
        else:
            message_text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâ\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω!üéÇ"
            conn = sqlite3.connect('DunGram.db')
            c = conn.cursor()
            c.execute("UPDATE CanumanQuest SET QuestId = ? WHERE UserId = ?", (user_quest+1, call.from_user.id,))
            conn.commit()
            conn.close()
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                callback_data=f"canuman:{call.from_user.id}"
            )
            btn_rmb = types.InlineKeyboardButton(
                text="–ü–ö–ú üñ±",
                callback_data="a"
            )
            markup.row(btn_rmb)
            markup.row(btn_back)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=markup)
