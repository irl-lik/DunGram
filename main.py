import telebot
from telebot import types
import sqlite3

import logging
from dotenv import load_dotenv, find_dotenv
import os
import time
from components import *
import callbacks
import alchemist
import dealer
import canuman
import sortie

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('telebot')
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logger.addHandler(console_handler)

load_dotenv(find_dotenv())
bot = telebot.TeleBot(os.getenv('TOKEN'))
start_time = time.time()
@bot.message_handler(func=lambda message: message.date < start_time)
def handle_old_updates(message):
    pass

@bot.message_handler(func=lambda message: '—Å—Ç—ã—á–∫–∞' in message.text)
def messages_sort(message):
    if message.text == '—Å—Ç—ã—á–∫–∞ –∞—Ç–∞–∫–∞':
        sortie.attack(message)
    elif message.text in ['—Å—Ç—ã—á–∫–∞ –ø—Ä–µ—Ä–≤–∞—Ç—å', '—Å—Ç—ã—á–∫–∞ —Å–±–µ–∂–∞—Ç—å']:
        sortie.sortie_end(message)

START = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã DungeonsRPG!\n–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ Cristalix Dungeons.'

@bot.message_handler(commands = ['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚öîÔ∏è', callback_data=f'start_game:{message.from_user.id}')
    btn1 = types.InlineKeyboardButton(text='–ü–µ—Ä—Å–æ–Ω–∞–∂ üêæ', callback_data=f'character:{message.from_user.id}')
    btn2 = types.InlineKeyboardButton(text='–ì–æ—Ä–æ–¥ üè∞', callback_data=f'town:{message.from_user.id}')
    btn3 = types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí', callback_data=f'inventory:{message.from_user.id}')
    btn4 = types.InlineKeyboardButton(text='FAQ ‚ùì', callback_data=f'FAQ:{message.from_user.id}')
    btn_code = types.InlineKeyboardButton(text='–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö üë®üèª‚Äçüíª', callback_data=f'coders:{message.from_user.id}')
    markup.add(btn_start)
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.add(btn_code)
    bot.send_message(message.chat.id, START,
                            reply_markup = markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('main'))
def handle_main_callback(call):
    user_id = call.from_user.id
    if not profile_exists(user_id):
        bot.send_message(call.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚öîÔ∏è', callback_data=f'start_game:{call.from_user.id}')
    btn1 = types.InlineKeyboardButton(text='–ü–µ—Ä—Å–æ–Ω–∞–∂ üêæ', callback_data=f'character:{call.from_user.id}')
    btn2 = types.InlineKeyboardButton(text='–ì–æ—Ä–æ–¥ üè∞', callback_data=f'town:{call.from_user.id}')
    btn3 = types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí', callback_data=f'inventory:{call.from_user.id}')
    btn4 = types.InlineKeyboardButton(text='FAQ ‚ùì', callback_data=f'FAQ:{call.from_user.id}')
    btn_code = types.InlineKeyboardButton(text='–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö üë®üèª‚Äçüíª', callback_data=f'coders:{call.from_user.id}')
    markup.add(btn_start)
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.add(btn_code)
    bot.send_message(call.message.chat.id, text="Dungeons –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ–±–µ..",
                            reply_markup = markup)

@bot.message_handler(commands = ['inventory'])
def handle_inventory(message):
    user_id = message.from_user.id
    if not profile_exists(user_id):
        bot.send_message(message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    conn = sqlite3.connect('DunGram.db')
    c = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('''
    SELECT i.ItemName, s.ItemCount
    FROM InventorySlots s
    JOIN Items i ON s.ItemId = i.ItemId
    WHERE s.UserId = ? AND s.ItemCount > 0
    ''', (user_id,))
    inventory_items = c.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
    if inventory_items:
        inventory_message = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        for index, (item_name, item_count) in enumerate(inventory_items, start=1):
            inventory_message += f"     {index}. {item_name}: {item_count} —à—Ç.\n"
    else:
        inventory_message = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, inventory_message)

    conn.close()

@bot.message_handler(commands=['town'])
def town(message):
    user_id = message.from_user.id
    if not profile_exists(user_id):
        bot.send_message(message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(
        text="–¢–æ–ø üèÜ", callback_data=f"top:{message.from_user.id}")
    btn2 = types.InlineKeyboardButton(
        text="–ü–æ–¥–∑–µ–º–µ–ª—å—è ü™¨", callback_data=f"enter_dungeon:{message.from_user.id}")
    btn3 = types.InlineKeyboardButton(
        text="–•—Ä–∞–Ω–∏–ª–∏—â–µ üì¶", callback_data=f"storage:{message.from_user.id}")
    btn4 = types.InlineKeyboardButton(
        text="–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ ü§î", callback_data=f"crossprofile:{message.from_user.id}")
    btn5 = types.InlineKeyboardButton(
        text="–ö—É–∑–Ω–µ—Ü üî®", callback_data=f"hammersmith:{message.from_user.id}")
    btn6 = types.InlineKeyboardButton(
        text="–ê–ª—Ö–∏–º–∏–∫ üß™", callback_data=f"alchemist:{message.from_user.id}")
    btn7 = types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–∞–≤–µ—Ü üíµ", callback_data=f"dealer:{message.from_user.id}")
    btn8 = types.InlineKeyboardButton(
        text="–í–æ—Å–∏–ª–∏–π ü§†", callback_data=f"canuman:{message.from_user.id}")
    btn_back = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"main:{message.from_user.id}")
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.row(btn5, btn6)
    markup.row(btn7, btn8)
    markup.row(btn_back)
    bot.send_message(message.chat.id, "–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –≥–æ—Ä–æ–¥!",
                    reply_markup=markup)

@bot.message_handler(commands=['character'])
def character(message):
    user_id = message.from_user.id
    if not profile_exists(user_id):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            text="–í–æ–∏–Ω üõ°", callback_data=f"select_warrior:{message.from_user.id}")
        btn2 = types.InlineKeyboardButton(
            text="–ú–∞–≥ üßô‚Äç‚ôÇÔ∏è", callback_data=f"select_wiz:{message.from_user.id}")
        btn3 = types.InlineKeyboardButton(
            text="–ê—Å—Å–∞—Å–∏–Ω ü•∑", callback_data=f"select_assasin:{message.from_user.id}")
        btn4 = types.InlineKeyboardButton(
            text="–û –∫–ª–∞—Å—Å–∞—Ö üëë", callback_data=f"about_classes:{message.from_user.id}")
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        bot.send_message(message.chat.id, "–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
                        reply_markup=markup)
    else:
        conn = sqlite3.connect('DunGram.db')
        c = conn.cursor()
        c.execute("SELECT * FROM Profiles WHERE UserId =?", (user_id,))
        profile = c.fetchone()
        c.execute("SELECT * FROM Users WHERE UserId =?", (user_id,))
        user = c.fetchone()
        c.execute("SELECT Balance FROM ProfileBalance WHERE UserId = ?", (user_id,))
        balance = c.fetchone()
        balance = balance[0] if balance is not None else 0
        markup = types.InlineKeyboardMarkup()
        btn4 = types.InlineKeyboardButton(
            text="–û –∫–ª–∞—Å—Å–∞—Ö üëë", callback_data=f"about_classes:{user_id}")
        markup.row(btn4)
        class_emoji = ""
        if profile[2] == "–í–æ–∏–Ω":
            class_emoji = "üõ°"
        elif profile[2] == "–ú–∞–≥":
            class_emoji = "üßô‚Äç‚ôÇÔ∏è"
        elif profile[2] == "–ê—Å—Å–∞—Å–∏–Ω":
            class_emoji = "ü•∑"
        message_text = (
            f"–í–∞—Å –∑–æ–≤—É—Ç: {user[1]}üîÖ\n"
            f"–í–∞—à –∫–ª–∞—Å—Å: {profile[2]}{class_emoji}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {profile[3]}üÜô\n"
            f"–û–ø—ã—Ç: {profile[4]}‚öúÔ∏è\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É–º—Ä—É–¥–æ–≤: {balance}üíé\n\n"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user[2]}üïì"
        )
        bot.send_message(message.chat.id,
                        text=message_text,
                        reply_markup=markup,
                        )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    callbacks_dict = {
        'start_game': callbacks.start_game,
        'character': callbacks.character,
        'town': callbacks.town,
        'inventory': callbacks.show_inventory,
        'FAQ': callbacks.show_FAQ,
        'coders': callbacks.show_coders,
        'about_classes': callbacks.about_classes,
        'select_warrior': callbacks.select_warrior,
        'select_wiz': callbacks.select_wiz,
        'select_assasin': callbacks.select_assasin,
        'crossprofile': callbacks.crossprofile,
        'alchemist': alchemist.alchemist,
        'dialogue_alchemist': alchemist.dialogue_alchemist,
        'alchemist_recipes': alchemist.alchemist_recipes,
        'standart_crafts': alchemist.standart_crafts,
        'heal_crafts': alchemist.heal_crafts,
        'auxiliary_crafts': alchemist.auxiliary_crafts,
        'battle_crafts': alchemist.battle_crafts,
        'brew_potions': alchemist.brew_potions,
        'brew_basic': alchemist.brew_basic,
        'brew_heal': alchemist.brew_heal,
        'brew_auxiliary': alchemist.brew_auxiliary,
        'brew_battle': alchemist.brew_battle,
        'brew_step_1': alchemist.brew_step_1,
        'brew_step_2': alchemist.brew_step_2,
        'brew_step_3': alchemist.brew_step_3,
        'brew_step_4': alchemist.brew_step_4,
        'dealer': dealer.dealer,
        'dealer_sell': dealer.dealer_sell,
        'canuman': canuman.canuman,
        'canuman_quest': canuman.canuman_quest,
        'sortie': sortie.sortie,
        'sortie_streets': sortie.sortie_streets,
        'sortie_advance_streets': sortie.sortie_advance_streets,
        'sortie_continue': sortie.sortie_continue,
    }
    
    callback_function = callbacks_dict.get(call.data.split(':')[0])
    if callback_function:
        callback_function(call)


@bot.message_handler(commands = ['main'])
def main(message):
    user_id = message.from_user.id
    if not profile_exists(user_id):
        bot.send_message(message.chat.id, "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return 
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ‚öîÔ∏è', callback_data=f'start_game:{message.from_user.id}')
    btn1 = types.InlineKeyboardButton(text='–ü–µ—Ä—Å–æ–Ω–∞–∂ üêæ', callback_data=f'character:{message.from_user.id}')
    btn2 = types.InlineKeyboardButton(text='–ì–æ—Ä–æ–¥ üè∞', callback_data=f'town:{message.from_user.id}')
    btn3 = types.InlineKeyboardButton(text='–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí', callback_data=f'inventory:{message.from_user.id}')
    btn4 = types.InlineKeyboardButton(text='FAQ ‚ùì', callback_data=f'FAQ:{message.from_user.id}')
    btn_code = types.InlineKeyboardButton(text='–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö üë®üèª‚Äçüíª', callback_data=f'coders:{message.from_user.id}')
    markup.add(btn_start)
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    markup.add(btn_code)
    bot.send_message(message.chat.id, text="Dungeons –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ–±–µ..",
                            reply_markup = markup)
bot.polling(none_stop=True, interval=0, skip_pending=True)
bot.stop_polling()